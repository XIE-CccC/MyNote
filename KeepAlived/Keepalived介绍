LVS：Linux Vritual Server 虚拟服务器是一个高可扩展性和高可用性的服务器。

使用LVS架设的服务器集群系统有三个部分组成：

最前端的负载均衡层（Loader Balancer）：有一台或者多台负载调度器（Director Server）组成，调度器主要作用类似于一台路由器，含有完成LVS功能所设定的路由表，通过路由表对Real Server服务的监控模块Ldiiector，用于监测各个Real Server服务的健康情况，在Real Server不可用时把它从LVS路由表中剔除，恢复时重新加入。

中间的服务器群组层，用Server Array表示，由一组实际运行应用服务的机器组成，Real Server可以使WEB服务器、MAIL服务器、FTP服务器、DNS服务器、视频服务器中的一个或者多个，每个Real Server之间通过高速的LAN或分布在各地的WAN相连接。在实际应用中，Director Server也可以同时兼任Real Server的角色。

最底层的数据共享存储层，用Shared Storage表示，为所有Real Server提供共享存储空间和内容一致性的存储区域，在物理上，一般有磁盘阵列设备组成，为了提供内容的一致性，一般可以通过NFS网络文件系统共享数据，oracle提供的OCFS2文件系统等。

![img](clipboard.png)

LVS的基本工作原理：

![img](clipboard.png)

1. 当用户负载均衡调度器（Director Server）发送请求，调度器将请求发送至内核空间
2. PREROUTING链首先会接收到用户请求，判断目标IP确定是本机IP，将数据包发往INPUT链
3. IPVS是工作在INPUT链上的，当用户请求到达INPUT时，IPVS会将用户请求和自己已定义好的集群服务进行比对，如果用户请求的就是定义的集群服务，那么此时IPVS会强行修改数据包里的目标IP地址及端口，并将新的数据包发往POSTROUTING链。
4. POSTROUTING链接收数据包后发现目标IP地址刚好是自己的后端服务器，那么此时通过选路，将数据包最终发送给后端的服务器。

1. IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，后将数据包发送至POSTROUTING链。此时报文的源IP为CIP，目标IP为RIP。
2. POSTROUTING链通过选路，将数据包发送给Real Server。
3. Real Server比对发现目标为自己IP，开始构建相应报文发挥给Director Server。此时报文的源IP为RIP，目标IP为CIP。
4. Director Server在相应客户端前，此时会将源IP地址修改为自己的VIP地址，然后相应给客户端。此时报文的源IP为VIP，目标IP为CIP。

当一个TCP连接的初始SYN报文到达时，IPVS就选择一台服务器，将报文转发给它。后通过查发报文的IP和TCP报文头地址，保证连接的后继报文被转发到相同的服务器。

IPVS：（IP Vritual Server） IP虚拟服务器，是运行在LVS下的提供负载均衡功能的一种技术。

VRRP：Vritual Router Redundancy Protocol 虚拟路由冗余协议，VRRP不但提供VIP还提供VMAC地址。为了防止随意一个VRRP设备加入到当前的虚拟路由组，VRRP提供五认证、简单8位字符串认证、MD5认证（该认证方式Keepalive不支持）。

VRRP工作过程：

1. 虚拟路由器中的路由器根据优先级选举出Master，Master路由器通过发送免费ARP报文，将自己的虚拟Mac地址通告给与它连接的设备。
2. Master路由器周期性发送VRRP报文，以公布自己的配置信息和工作状态
3. 如果Master故障，虚拟路由器中的Backup路由器将根据优先级重新选举新的Master
4. 虚拟路由器状态切换时，Master路由器由一台设备切换回另外一台设备，新的Master路由器只是简单的发送一个携带虚拟Mac地址和虚拟IP的免费ARP报文，这样就可以跟新其他设备中缓存的ARP信息。
5. Backup路由器的优先级高于Master时，由Backup的工作方式（抢占式或者非抢占式）决定是否重新选举Master。

LVS-NAT模式的特性

1. RS应该和DIP一样使用私网地址，且RS的网关要指向DIP；
2. 请求和响应报文都要经由Director转发；极高负载的场景中，Director可能会成为系统瓶颈；
3. 支持端口映射；
4. RS可以使用任意OS；
5. RS的RIP和Director的DIP必须在同一IP网络；

缺陷：对Director Server压力会比较大，请求和响应都需经过director server

keepalived的实现是通过虚拟ip，本质就是为ipvs服务的，不需要共享存储。

主要提供loadbalancing（负载均衡）：实现需要依赖Linux虚拟服务内核模块（ipvs）

high-availability（高可用）：通过VRRP协议实现多台及其之间的故障转移服务。

软件结构如下：

![img](f39d15563ed34809a6036dc3ffeec5d6.jpg)

内核空间：主要包括IPVS（IP虚拟服务器，用于实现网络服务的负载均衡）和NETLINK（提供高级路由及其他相关网络功能）

用户空间：

- WatchDog：负责监控checkers和VRRP进程的状况
- VRRP Stack：负责负载均衡器之间的失败切换FailOver，如果只用一个负载均衡器，则VRRP不是必须的
- Checkers：负责真实服务器的健康检查healthchecking，是keepalived的最主要功能。可以没有VRRP Stack，但健康检查healthchecking是一定要有的。
- IPVS wrapper：用户发送设定的规则到内核ipvs代码
- Netlink Reflector：用来设定vrrp的vip地址等

Keepalived启动后会有一个主进程Master，并生成两个子进程，一个是VRRP Stack负责VRRP的实现、一个是Checkers负责IPVS的后端的应用服务器的健康检查，当检测失败就会调用IPVS规则删除后端服务器的IP地址，检测成功了再加回来。当检测后端有失败的情况可以使用SMTP通知管理员，另外VRRP如果检测到另一个Keepalive失败也可以通过SMTP通知管理员。

keepalived主要任务就是去调用ipvsadm命令，来生成规则，并自动实现将用户需要访问的地址转移到可用LVS节点实现。

Keepalived工作到多个LVS主机节点上，当前活动节点叫Master，备用节点叫Backup，Master会不停的向Backup节点通告自己的心跳，这种通告是基于VRRP协议的。Backup节点一旦接收不到Master的通告信息，就会把LVS的VIP拿过来，并把ipvs的规则也拿过来在自己身上生效，从而替代Master节点。